{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport anecdoteService from '../services/anecdotes';\n\nconst orderAnecdotes = anecdotes => anecdotes.sort((anecdoteA, anecdoteB) => anecdoteB.votes - anecdoteA.votes);\n\nconst anecdoteSlice = createSlice({\n  name: 'anecdotes',\n  initialState: [],\n  reducers: {\n    // addVote(state, action) {\n    //   const id = action.payload;\n    //   const anecdoteToChange = state.find(anecdote => anecdote.id === id);\n    //   const changedAnecdote = {\n    //     ...anecdoteToChange,\n    //     votes: anecdoteToChange.votes + 1\n    //   }\n    //   return orderAnecdotes(state.map(anecdote => \n    //     anecdote.id === id ? changedAnecdote : anecdote\n    //   ));\n    // },\n    updateAnecdote(state, action) {\n      const id = action.payload.id;\n      const changedAnecdote = action.payload;\n      return orderAnecdotes(state.map(anecdote => anecdote.id === id ? changedAnecdote : anecdote));\n    },\n\n    appendAnecdote(state, action) {\n      state.push(action.payload);\n    },\n\n    setAnecdotes(_state, action) {\n      return action.payload;\n    }\n\n  }\n});\nexport const {\n  updateAnecdote,\n  appendAnecdote,\n  setAnecdotes\n} = anecdoteSlice.actions;\nexport const initializeAnecdotes = () => {\n  return async dispatch => {\n    const anecdotes = await anecdoteService.getAll();\n    dispatch(setAnecdotes(anecdotes));\n  };\n};\nexport const newAnecdote = content => {\n  return async dispatch => {\n    const newAnecdote = await anecdoteService.createNew(content);\n    dispatch(appendAnecdote(newAnecdote));\n  };\n};\nexport const addVote = anecdote => {\n  return async dispatch => {\n    c;\n    const updatedAnecdote = await anecdoteService.update(anecdote);\n    dispatch(updateAnecdote(updatedAnecdote));\n  };\n};\nexport default anecdoteSlice.reducer;","map":{"version":3,"sources":["/home/missy/full_stack_open_course/part6/anecdotes/src/reducers/anecdoteReducer.js"],"names":["createSlice","anecdoteService","orderAnecdotes","anecdotes","sort","anecdoteA","anecdoteB","votes","anecdoteSlice","name","initialState","reducers","updateAnecdote","state","action","id","payload","changedAnecdote","map","anecdote","appendAnecdote","push","setAnecdotes","_state","actions","initializeAnecdotes","dispatch","getAll","newAnecdote","content","createNew","addVote","c","updatedAnecdote","update","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,eAAP,MAA4B,uBAA5B;;AAEE,MAAMC,cAAc,GAAGC,SAAS,IAChCA,SAAS,CAACC,IAAV,CAAe,CAACC,SAAD,EAAYC,SAAZ,KACbA,SAAS,CAACC,KAAV,GAAkBF,SAAS,CAACE,KAD9B,CADA;;AAMF,MAAMC,aAAa,GAAGR,WAAW,CAAC;AAChCS,EAAAA,IAAI,EAAE,WAD0B;AAEhCC,EAAAA,YAAY,EAAE,EAFkB;AAGhCC,EAAAA,QAAQ,EAAE;AACR;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEAC,IAAAA,cAAc,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC5B,YAAMC,EAAE,GAAGD,MAAM,CAACE,OAAP,CAAeD,EAA1B;AACA,YAAME,eAAe,GAAGH,MAAM,CAACE,OAA/B;AAEA,aAAOd,cAAc,CAACW,KAAK,CAACK,GAAN,CAAUC,QAAQ,IACtCA,QAAQ,CAACJ,EAAT,KAAgBA,EAAhB,GAAqBE,eAArB,GAAuCE,QADnB,CAAD,CAArB;AAGD,KAvBO;;AAyBRC,IAAAA,cAAc,CAACP,KAAD,EAAQC,MAAR,EAAgB;AAC5BD,MAAAA,KAAK,CAACQ,IAAN,CAAWP,MAAM,CAACE,OAAlB;AACD,KA3BO;;AA6BRM,IAAAA,YAAY,CAACC,MAAD,EAAST,MAAT,EAAiB;AAC3B,aAAOA,MAAM,CAACE,OAAd;AACD;;AA/BO;AAHsB,CAAD,CAAjC;AAsCA,OAAO,MAAM;AAAEJ,EAAAA,cAAF;AAAkBQ,EAAAA,cAAlB;AAAkCE,EAAAA;AAAlC,IAAmDd,aAAa,CAACgB,OAAvE;AAEP,OAAO,MAAMC,mBAAmB,GAAG,MAAM;AACvC,SAAO,MAAMC,QAAN,IAAkB;AACvB,UAAMvB,SAAS,GAAG,MAAMF,eAAe,CAAC0B,MAAhB,EAAxB;AACAD,IAAAA,QAAQ,CAACJ,YAAY,CAACnB,SAAD,CAAb,CAAR;AACD,GAHD;AAID,CALM;AAOP,OAAO,MAAMyB,WAAW,GAAIC,OAAD,IAAa;AACtC,SAAO,MAAMH,QAAN,IAAkB;AACvB,UAAME,WAAW,GAAG,MAAM3B,eAAe,CAAC6B,SAAhB,CAA0BD,OAA1B,CAA1B;AACAH,IAAAA,QAAQ,CAACN,cAAc,CAACQ,WAAD,CAAf,CAAR;AACD,GAHD;AAID,CALM;AAOP,OAAO,MAAMG,OAAO,GAAIZ,QAAD,IAAc;AACnC,SAAO,MAAMO,QAAN,IAAkB;AACvBM,IAAAA,CAAC;AACD,UAAMC,eAAe,GAAG,MAAMhC,eAAe,CAACiC,MAAhB,CAAuBf,QAAvB,CAA9B;AACAO,IAAAA,QAAQ,CAACd,cAAc,CAACqB,eAAD,CAAf,CAAR;AACD,GAJD;AAKD,CANM;AAQP,eAAezB,aAAa,CAAC2B,OAA7B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport anecdoteService from '../services/anecdotes';\n\n  const orderAnecdotes = anecdotes => (\n  anecdotes.sort((anecdoteA, anecdoteB) => (\n    anecdoteB.votes - anecdoteA.votes\n  ))\n);\n\nconst anecdoteSlice = createSlice({\n  name: 'anecdotes',\n  initialState: [],\n  reducers: {\n    // addVote(state, action) {\n    //   const id = action.payload;\n\n    //   const anecdoteToChange = state.find(anecdote => anecdote.id === id);\n\n    //   const changedAnecdote = {\n    //     ...anecdoteToChange,\n    //     votes: anecdoteToChange.votes + 1\n    //   }\n\n    //   return orderAnecdotes(state.map(anecdote => \n    //     anecdote.id === id ? changedAnecdote : anecdote\n    //   ));\n    // },\n\n    updateAnecdote(state, action) {\n      const id = action.payload.id\n      const changedAnecdote = action.payload;\n\n      return orderAnecdotes(state.map(anecdote => \n        anecdote.id === id ? changedAnecdote : anecdote\n      ));\n    },\n\n    appendAnecdote(state, action) {\n      state.push(action.payload);\n    },\n\n    setAnecdotes(_state, action) {\n      return action.payload;\n    },\n  },\n})\n\nexport const { updateAnecdote, appendAnecdote, setAnecdotes } = anecdoteSlice.actions;\n\nexport const initializeAnecdotes = () => {\n  return async dispatch => {\n    const anecdotes = await anecdoteService.getAll();\n    dispatch(setAnecdotes(anecdotes));\n  }\n}\n\nexport const newAnecdote = (content) => {\n  return async dispatch => {\n    const newAnecdote = await anecdoteService.createNew(content);\n    dispatch(appendAnecdote(newAnecdote));\n  }\n}\n\nexport const addVote = (anecdote) => {\n  return async dispatch => {\n    c\n    const updatedAnecdote = await anecdoteService.update(anecdote);\n    dispatch(updateAnecdote(updatedAnecdote));\n  }\n}\n\nexport default anecdoteSlice.reducer;"]},"metadata":{},"sourceType":"module"}